# -*- coding: utf-8 -*-
"""Weather Trend Forecasting - Ethan Darapheth.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TnHMG7YGQ6h67l5niqz3xR1addiKXqRo
"""

!pip uninstall -y torch notebook notebook_shim tensorflow tensorflow-datasets prophet torchaudio torchdata torchtext torchvision

!pip install neuralprophet

import pandas as pd
from neuralprophet import NeuralProphet
from matplotlib import pyplot as plt

"""# Read in Data"""

df = pd.read_csv('GlobalWeatherRepository.csv')
df.head()

df.location_name.unique()

df.columns

df.dtypes

Bei = df[df['location_name']=='Beijing']
Bei['last_updated'] = pd.to_datetime(Bei['last_updated'])
Bei.head()

Bei.dtypes

plt.subplot(1,2,1)
plt.plot(Bei['last_updated'], Bei['temperature_celsius'])
plt.title('Temperature')

plt.xticks(rotation=45)

plt.subplot(1, 2, 2)
plt.plot(Bei['last_updated'], Bei['precip_mm'])
plt.title('Precipitation')

plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

"""# Train Model"""

data_precip = Bei[['last_updated', 'precip_mm']]
data_precip.dropna(inplace=True)
data_precip.columns = ['ds', 'y']

data_precip.head()

data_precip

# This Model is fitting precip_mm
m_precip = NeuralProphet()
m_precip.fit(data_precip, freq='D', epochs=1000)

data_temp = Bei[['last_updated', 'temperature_celsius']]
data_temp.dropna(inplace=True)
data_temp.columns = ['ds', 'y']

data_temp.head()

data_temp

# This Model is fitting temperature_celsius
m_temp = NeuralProphet()
m_temp.fit(data_temp, freq='D', epochs=1000)

"""# Forecast

## Showing Predictions for both Precipitation and Temperature

### Forecast Temperature in Fahrenheit for the next 700 days.
"""

future_temp = m_temp.make_future_dataframe(data_temp, periods=700)
forecast_temp = m_temp.predict(future_temp)
forecast_temp.head()

plt = m_temp.plot(forecast_temp)
plt.show()

plt = m_temp.plot_components(forecast_temp)
plt.show()

"""### Forecast Precipitation in mm for the next 700 days."""

future_precip = m_precip.make_future_dataframe(data_precip, periods=700)
forecast_precip = m_precip.predict(future_precip)
forecast_precip.head()

plt = m_precip.plot(forecast_precip)
plt.show()

plt = m_precip.plot_components(forecast_precip)
plt.show()